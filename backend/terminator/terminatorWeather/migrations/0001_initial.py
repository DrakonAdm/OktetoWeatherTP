# Generated by Django 4.2.5 on 2023-09-12 08:31

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import terminatorWeather.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Advertisement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short', models.CharField(max_length=20, unique=True, verbose_name='English')),
                ('long', models.CharField(max_length=100, verbose_name='Russian')),
                ('page', models.ImageField(upload_to='advertisement_images/')),
            ],
            options={
                'db_table': 'advertisement',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country', models.CharField(max_length=100, null=True)),
                ('city', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'location',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Past',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('minTem', models.FloatField()),
                ('maxTem', models.FloatField()),
                ('averageTem', models.FloatField()),
                ('atmosphericPressure', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
                ('windSpeed', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('precipitation', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0)])),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='terminatorWeather.location')),
            ],
            options={
                'db_table': 'past',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Forecast',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('minTem', models.FloatField(null=True)),
                ('maxTem', models.FloatField(null=True)),
                ('averageTem', models.FloatField(null=True)),
                ('atmosphericPressure', models.IntegerField(null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('windSpeed', models.IntegerField(null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('precipitation', models.DecimalField(decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='terminatorWeather.location')),
            ],
            options={
                'db_table': 'forecast',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Abnormal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.IntegerField()),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='terminatorWeather.location')),
                ('maxP', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pastP', to='terminatorWeather.past')),
                ('maxT', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pastMaxT', to='terminatorWeather.past')),
                ('maxWS', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pastWS', to='terminatorWeather.past')),
                ('minT', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pastMinT', to='terminatorWeather.past')),
            ],
            options={
                'db_table': 'abnormal',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email')),
                ('nickname', models.CharField(blank=True, null=True, verbose_name='Имя')),
                ('city', models.CharField(blank=True, max_length=100, null=True, verbose_name='City')),
                ('country', models.CharField(blank=True, max_length=100, null=True, verbose_name='Country')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', terminatorWeather.models.UserManager()),
            ],
        ),
    ]
